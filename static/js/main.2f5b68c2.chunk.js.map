{"version":3,"sources":["images/delete.png","components/Column/Column.js","components/Delete/Delete.js","components/Card/Card.js","components/Header/Header.js","components/AddColumn/AddColumn.js","components/Button/Button.js","components/AddField/AddField.js","serviceWorker.js","index.js"],"names":["module","exports","Column","props","draggableId","id","toString","index","provided","className","draggableProps","dragHandleProps","ref","innerRef","children","Delete","src","require","alt","onClick","deleteItem","Card","columnId","value","Header","useState","headerText","headerTextSet","showInput","showInputSet","console","log","type","onChange","e","target","deleteColumn","AddColumn","show","showSet","header","headerSet","clickHandler","placeholder","trim","addColumn","buttonText","panelText","Button","createNewTodo","AddField","text","textSet","Boolean","window","location","hostname","match","Trello","items","itemsSet","onDragEnd","result","destination","source","droppableId","start","Number","finish","startTodos","Array","from","todos","splice","startUpd","map","curr","finishTodos","slice","finishUpd","val","newTodos","newItems","tmp","direction","droppableProps","key","filter","i","length","newTodo","push","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f5b68c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete.a6a3615c.png\";","import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd'; \r\nimport './Column.css';\r\n\r\nfunction Column(props){\r\n        return(\r\n            <Draggable draggableId={'column' + props.id.toString()} index={props.index}>\r\n                {provided => (\r\n                    <div className=\"column\" {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\r\n                        {props.children}\r\n                    </div>\r\n                )}\r\n            </Draggable>    \r\n        );\r\n}\r\n\r\nexport default Column;","import React from 'react';\r\nimport './Delete.css';\r\n\r\nfunction Delete(props){\r\n    return(\r\n        <div className=\"delete\">\r\n            <img src={require(\"../../images/delete.png\")} alt=\"delete\" onClick={() => props.deleteItem()}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Delete;","import React from 'react';\r\nimport Delete from '../Delete/Delete';\r\nimport { Draggable } from 'react-beautiful-dnd'; \r\nimport './Card.css';\r\n\r\nfunction Card(props){\r\n    return(\r\n        <Draggable draggableId={props.columnId.toString() + 'card' + props.id.toString()} index={props.index}>\r\n            {(provided) => (\r\n                <div className=\"card\" {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\r\n                    {props.value}\r\n                    <Delete deleteItem={() => props.deleteItem(props.id,props.columnId)}/>\r\n                </div>\r\n            )}\r\n        </Draggable>    \r\n    );\r\n}\r\n\r\nexport default Card;","import React,{ useState } from 'react';\r\nimport Delete from '../Delete/Delete';\r\nimport './Header.css';\r\n\r\nfunction Header(props){\r\n    const [headerText,headerTextSet] = useState(props.value);\r\n    const [showInput,showInputSet] = useState(false);\r\n    \r\n    function changeHandler(e){\r\n        headerTextSet(e.target.value);\r\n    }\r\n    return(\r\n        <div className=\"header\">\r\n            {showInput?\r\n            <div className=\"header__input\" onClick={() => console.log()}>\r\n                <input type=\"text\" value={headerText} onChange={changeHandler}/>\r\n            </div>\r\n            :\r\n            <div className=\"header__Text\" onClick={() => showInputSet(true)}>\r\n                <h3>{headerText}</h3>\r\n            </div>\r\n            }\r\n            <Delete deleteItem={() => props.deleteColumn(props.columnId)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React,{ useState } from 'react';\r\nimport \"./AddColumn.css\";\r\n\r\nfunction AddColumn(props){\r\n    const [show,showSet] = useState(false);\r\n    const [header,headerSet] = useState(' ');\r\n\r\n    function changeHandler(e){\r\n        headerSet(e.target.value);\r\n    }\r\n\r\n    function clickHandler(){\r\n        show?\r\n        showSet(false)\r\n        :\r\n        showSet(true)\r\n    } \r\n\r\n    return(show?\r\n        <div className=\"columnAddNotHidden\">\r\n            <input type=\"text\" placeholder=\"Enter column title\" onChange={changeHandler}/>\r\n            <div className=\"columnAddNotHidden-flexbox\">\r\n                <button onClick={() => {\r\n                    if(header.trim() !== '') \r\n                        {\r\n                            props.addColumn(header)\r\n                        }\r\n                    }}>\r\n                    {props.buttonText}\r\n                </button>\r\n                <div className=\"columnAddNotHidden-flexbox-buttonX\" onClick={() => clickHandler()}>\r\n                    X\r\n                </div>\r\n            </div>\r\n        </div>\r\n        :\r\n        <div className=\"columnAddHidden\" onClick={() => clickHandler()}>\r\n            {props.panelText}\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default AddColumn;","import React from 'react';\r\nimport './Button.css';\r\n\r\nfunction Button(props){\r\n    return(\r\n        <div className=\"button\">\r\n            <button onClick={() => props.createNewTodo()}>\r\n                {props.value}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Button;","import React,{ useState } from 'react';\r\nimport Button from '../Button/Button';\r\n\r\nimport './AddField.css';\r\n\r\nfunction AddField(props){\r\n    const [show,showSet] = useState(false);\r\n    const [text,textSet] = useState('');\r\n\r\n    function clickHandler(){\r\n        show?\r\n        showSet(false)\r\n        :\r\n        showSet(true)\r\n    }\r\n\r\n    function changeHandler(e){\r\n        textSet(e.target.value);\r\n    }\r\n    \r\n    return(show?\r\n        <div className=\"column-hiddenDescription\">\r\n            <textarea onChange={changeHandler} placeholder=\"Type your text here...\"></textarea>\r\n            <div className=\"column-hiddenDescription-flexbox\">\r\n                <Button value={props.buttonText} createNewTodo={() => {\r\n                    if(text.trim() !== '') \r\n                        {\r\n                            props.createNewTodo(text)\r\n                        }\r\n                }}/>\r\n                <div className=\"column-hiddenDescription-flexbox-button\" onClick={() => clickHandler()}>\r\n                    X\r\n                </div>\r\n            </div>\r\n        </div>\r\n        :\r\n        <div className=\"column-addCard\" onClick={() => clickHandler()}>\r\n            {props.panelText}\r\n        </div>\r\n    );\r\n}\r\nexport default AddField;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React,{ useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Column from './components/Column/Column';\r\nimport Card from './components/Card/Card';\r\nimport Header from './components/Header/Header';\r\nimport AddColumn from './components/AddColumn/AddColumn';\r\nimport AddField from './components/AddField/AddField';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'; \r\nimport './index.css';\r\n\r\nfunction Trello(){\r\n    \r\n    const [items,itemsSet] = useState([]);\r\n\r\n    function addItem(newTodo,columnId){\r\n      itemsSet(items.map(val => {\r\n        if(val.columnId === columnId){\r\n          val.todos.push({\r\n            text: newTodo,\r\n            id:Number(val.todos.length + 1)\r\n          })\r\n        }\r\n        return val;\r\n      }));\r\n    }\r\n\r\n    function addColumn(header){\r\n      let tmp = [...items,\r\n        {\r\n          header: header,\r\n          todos:[],\r\n          columnId:Number(items.length + 1)\r\n        }\r\n      ];\r\n\r\n      tmp = tmp.map((curr,index) => {\r\n        return {...curr,columnId:Number(index+1)}\r\n      });\r\n\r\n      itemsSet(tmp);\r\n    }\r\n\r\n    function deleteItem(id,columnId){   //couldn't implement no loop solution\r\n      let tmp = [...items];             //future me,please do ;)\r\n      for(let i = 0;i<tmp.length;i++){\r\n        if(tmp[i].columnId === columnId){\r\n          tmp[i].todos = tmp[i].todos.filter(curr => curr.id !== id);\r\n        }   \r\n      }\r\n\r\n      tmp = tmp.map(curr =>\r\n        {\r\n          if(curr.columnId === columnId){\r\n            return(\r\n              {\r\n                ...curr,\r\n                todos: curr.todos.map((val,index) => {\r\n                  return ({\r\n                    ...val,\r\n                    id:Number(index + 1) //here\r\n                  })\r\n                })\r\n              }\r\n            );}\r\n            else{\r\n              return curr;\r\n            } \r\n        })\r\n     itemsSet(tmp);\r\n    }\r\n\r\n    function deleteColumn(columnId){\r\n       let tmp = items.filter((val,index) => {\r\n        if(val.columnId !== columnId) return {...val,columnId:Number(index + 1)};\r\n      });\r\n\r\n      itemsSet(tmp);\r\n    }\r\n\r\n    //drag and drop\r\n    function onDragEnd(result){\r\n      const {destination, source, draggableId, type} = result;\r\n\r\n      if(!destination) return;\r\n      \r\n      if(destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n      if(type === 'column'){\r\n        const newItems = Array.from(items);\r\n        newItems.splice(source.index,1);\r\n        newItems.splice(destination.index,0,items[Number(draggableId.slice(6))-1]);\r\n      \r\n          const tmp = newItems.map((curr,index) =>{\r\n            return{\r\n              ...curr,\r\n              columnId:Number(index + 1)\r\n            };\r\n          });\r\n          \r\n          itemsSet(tmp);\r\n        \r\n        return;\r\n      }\r\n\r\n     //columns\r\n      const start = items[Number(source.droppableId) - 1]; \r\n      const finish = items[Number(destination.droppableId)- 1]; \r\n\r\n      if(start === finish){\r\n        const newTodos = Array.from(start.todos);\r\n        \r\n        newTodos.splice(source.index,1);\r\n        console.log(Number(draggableId.slice(5)));\r\n        newTodos.splice(destination.index,0,start.todos[Number(draggableId.slice(5))-1]);\r\n        \r\n        start.todos = newTodos.map((curr,index) => \r\n          {\r\n            return {\r\n              ...curr,\r\n              id:Number(index + 1), //here\r\n            }\r\n          }  \r\n        );\r\n\r\n        const newItems = items.map(curr => {\r\n          if(curr.columnId === start.columnId){\r\n            return start;\r\n          }\r\n          else{\r\n            return curr;\r\n          }\r\n        })\r\n  \r\n        itemsSet(newItems);\r\n        return;\r\n      }\r\n\r\n      //start column changes\r\n      const startTodos = Array.from(start.todos);\r\n      startTodos.splice(source.index,1);\r\n\r\n      //sort todos in a start column\r\n      const startUpd = \r\n        {\r\n          ...start,\r\n          todos:startTodos.map((curr,index) => {\r\n            return{...curr,id:Number(index+1)} //change here\r\n          })\r\n        }\r\n      \r\n      //finish column changes\r\n      const finishTodos = Array.from(finish.todos);\r\n      finishTodos.splice(destination.index,0,start.todos[Number(draggableId.slice(5)) -1]); \r\n\r\n      //sort todos in a finish column\r\n      const finishUpd = \r\n        {\r\n          ...finish,\r\n          todos:finishTodos.map((curr,index) => {\r\n            return{...curr,id:Number(index+1)}  //here\r\n          })\r\n        }\r\n        \r\n      itemsSet(items.map((val,index) => {\r\n        if(index === Number(source.droppableId) - 1 ){ \r\n          return startUpd;\r\n        }\r\n        if(index === Number(destination.droppableId) - 1){ \r\n          return finishUpd;\r\n        }\r\n        else{\r\n          return val;\r\n        }\r\n      }));\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n          <DragDropContext onDragEnd={onDragEnd}>\r\n            <Droppable droppableId = \"smpl\" direction=\"horizontal\" type=\"column\">\r\n              {provided => (\r\n                <div className=\"container\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                {items.map((curr,index) =>\r\n                  (\r\n                      <Column key={curr.columnId} id={curr.columnId} index={index}>   \r\n                        <Header value={curr.header} columnId={curr.columnId} deleteColumn={(columnId) => deleteColumn(columnId)}/>\r\n                        <Droppable droppableId={curr.columnId.toString()} type=\"task\">\r\n                          {provided => (\r\n                            <div className=\"overflowCards\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                              {curr.todos.map((val,index) => \r\n                                (<Card key={val.id} value={val.text} id={val.id} index={index} columnId={curr.columnId} deleteItem={(id,columnId) => deleteItem(id,columnId)}/>)       \r\n                              )}\r\n                              {provided.placeholder}\r\n                            </div>\r\n                          )}\r\n                        </Droppable>\r\n                        <AddField createNewTodo={(text)=> addItem(text,curr.columnId)} buttonText=\"Add Card\" panelText=\"+ Add a card\"/>\r\n                      </Column>\r\n                ))}\r\n                {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>  \r\n          </DragDropContext>    \r\n            <AddColumn buttonText=\"Add Column\" panelText=\"+ Add a column\" addColumn={(header) => addColumn(header)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Trello />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}